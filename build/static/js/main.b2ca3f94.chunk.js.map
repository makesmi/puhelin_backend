{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","getData","response","data","services_persons","axios","get","then","newPerson","post","person","delete","concat","id","put","Notification","_ref","message","notificationStyle","color","isError","background","fontSize","borderStyle","borderRadius","padding","marginBottom","react_default","a","createElement","style","Filter","_ref2","filterText","changeFilterText","value","onChange","PersonForm","_ref3","addPerson","newName","changeNewName","newNumber","changeNewNumber","onSubmit","type","Persons","_ref4","persons","deletePerson","map","key","name","number","onClick","App","_useState","useState","_useState2","Object","slicedToArray","setPersons","_useState3","_useState4","setNewName","_useState5","_useState6","setNewNumber","_useState7","_useState8","setFilterText","_useState9","error","_useState10","notification","setNotification","useEffect","personService","setNotificationMessage","changeNumber","changedPerson","objectSpread","savedPerson","replace","setTimeout","catch","filter","p","visiblePersons","toLowerCase","indexOf","App_Notification","App_Filter","event","target","App_PersonForm","preventDefault","existingPerson","find","window","confirm","addedPerson","App_Persons","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b2ca3f94.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst baseUrl = \"/api/persons\"\r\n\r\nconst getData = response => response.data\r\n\r\nconst getAll = () => axios.get(baseUrl).then(getData)\r\n\r\nconst addPerson = newPerson => axios.post(baseUrl, newPerson).then(getData)\r\n\r\nconst deletePerson = person => axios.delete(`${baseUrl}/${person.id}`)\r\n\r\nconst changePerson = person => axios.put(`${baseUrl}/${person.id}`, person).then(getData)\r\n\r\nexport default {getAll, addPerson, deletePerson, changePerson}","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\n\nconst Notification = ({message, isError}) => {\n  const notificationStyle = {\n    color: isError ? 'red' : 'green',\n    background: 'lightgrey',\n    fontSize: 20,\n    borderStyle: 'solid',\n    borderRadius: 5,\n    padding: 10,\n    marginBottom: 10\n  }\n\n  return message !== null ? (\n    <div style={notificationStyle}>{message}</div>\n  ) : null\n}\n\nconst Filter = ({filterText, changeFilterText}) => (\n  <div>\n    filter shown with <input value={filterText} onChange={changeFilterText} />\n  </div>\n)\n\nconst PersonForm = ({addPerson, newName, changeNewName, newNumber, changeNewNumber}) => (\n    <form onSubmit={addPerson}>\n      <div>name: <input value={newName} onChange={changeNewName} /></div>\n      <div>number: <input value={newNumber} onChange={changeNewNumber} /></div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n)\n\nconst Persons = ({persons, deletePerson}) => \n  persons.map(person => (\n    <div key={person.name}>\n      {person.name} {person.number}\n      <button onClick={() => deletePerson(person)}>delete</button>\n    </div>\n  )\n)\n\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filterText, setFilterText ] = useState('')\n  const [notification, setNotification] = useState({\n    message: null,\n    error: false\n  })\n\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(setPersons)\n  }, [])\n\n  const changeNewName = event => setNewName(event.target.value)\n  const changeNewNumber = event => setNewNumber(event.target.value)\n  const changeFilterText = event => setFilterText(event.target.value.toLowerCase())\n  const setNotificationMessage = message => setNotification({message, error: false})\n  \n  const changeNumber = person => {\n    const changedPerson = {...person, number: newNumber}\n    personService.changePerson(changedPerson).then(savedPerson => {\n      const replace = person => person.id === savedPerson.id\n      setPersons(persons.map(person => replace(person) ? savedPerson : person))\n      setNewName('')\n      setNewNumber('')\n      setNotificationMessage(`Changed ${person.name}`)\n      setTimeout(() => setNotificationMessage(null), 5000)\n    })\n    .catch(error => {\n      setNotification({message: `Information of ${person.name} has already been removed from server`, error: true})\n      setTimeout(() => setNotificationMessage(null), 5000)\n      setPersons(persons.filter(p => p.id !== person.id))\n    })\n  }\n\n  const addPerson = event => {\n    event.preventDefault()\n    const existingPerson = persons.find(person => person.name === newName)\n    if(existingPerson) {\n      if(window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)){\n        changeNumber(existingPerson) \n      }\n      return\n    }\n    const newPerson = {\n      name: newName, \n      number: newNumber \n    }\n    personService\n      .addPerson(newPerson)\n      .then(addedPerson => {\n        setPersons(persons.concat(addedPerson))\n        setNewName('')\n        setNewNumber('')\n        setNotificationMessage(`Added ${addedPerson.name}`)\n        setTimeout(() => setNotificationMessage(null), 5000)\n      })\n  }\n\n  const deletePerson = person => {\n    if(window.confirm(`Delete ${person.name} ?`)){\n      personService.deletePerson(person)\n        .then(() => {\n          setPersons(persons.filter(p => p.id !== person.id))\n          setNotificationMessage(`Deleted ${person.name}`)\n          setTimeout(() => setNotificationMessage(null), 5000)\n        })\n        .catch(error => {\n          setNotification({message: `Information of ${person.name} has already been removed from server`, error: true})\n          setTimeout(() => setNotificationMessage(null), 5000)\n          setPersons(persons.filter(p => p.id !== person.id))\n        })\n      }\n  }\n\n  const visiblePersons =  persons.filter(person => person.name.toLowerCase().indexOf(filterText) > -1)\n\n  return (\n    <div>\n      <h2>Phonebook!</h2>\n      <Notification message={notification.message} isError={notification.error} />\n      <Filter filterText={filterText} changeFilterText={changeFilterText} />\n      <h2>add a new</h2>\n      <PersonForm addPerson={addPerson} \n          newName={newName} changeNewName={changeNewName} \n          newNumber={newNumber} changeNewNumber={changeNewNumber} />\n      <h2>Numbers</h2>\n      <Persons persons={visiblePersons} deletePerson={deletePerson} />\n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}